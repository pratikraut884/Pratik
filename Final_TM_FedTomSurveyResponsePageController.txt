public class TM_FedTomSurveyResponsePageController {
    //Newly created this file by Pratik 2
    public List<FedTOM_Survey_Question__c> queList {get;set;}
    public List<QuestionWrapper> queWraList{get;set;}
    public Id surveySentId {get;set;}
    public List<Survey_Sent__c> surveySentList {get;set;}
    public Survey_Sent__c surveySent {get;set;}
    public List<FedTOM_Survey_Questionnaire__c> surveyList{get;set;}
    public FedTOM_Survey_Questionnaire__c survey {get;set;}
    public List<Survey_Que_Answer__c > surveyAnsList{get;set;}
    public List<Survey_Que_Answer__c> surveyAnsUpdateList;
    
    public Boolean isSuccess{get; set;}
    public boolean alreadySubmitted{get;set;}
    public user usr {get;set;}
    public Boolean isContinueClicked {get;set;}
    public Boolean isOnLoad{get; set;}
    public Boolean hideFirstPanel{get;set;}
    
    public String firstName {get;set;}
    public String lastName {get;set;}
    public String companyName {get;set;}
    public String emailAddr{get;set;}
    public Boolean allMandatoryAnswered{get;set;}
    //public Profile p;\
    public Boolean isValidUser{get; set;}
    public Boolean showAccordian{get;set;} //newly added by @ 10/12/2018
    public String errorMessageForGuestUser{get;set;} //newly added by @ 10/12/2018
    public Boolean isSurveyExpire {get;set;}
    public Set<String> ansIdSet ;
    
    public Map<String,List<String>> ansIdvsdepedentQueMap  {get;set;}
    public List<QuestionOptionWrapper> qweOptWrapList {get;set;}
    public Map<String,String> depQueIdvsParentQueIdMap {get;set;}
    
    public String responseStatus {get;set;}
    
    public TM_FedTomSurveyResponsePageController(ApexPages.StandardController controller) {
        //showAccordian = false;
        errorMessageForGuestUser = '';
        System.debug('in controller');
      if(Schema.sObjectType.Survey_Teaming_Request_Task_Questionnair__c.isAccessible() && Schema.sObjectType.FedTOM_Survey_Questionnaire__c.isAccessible() && Schema.sObjectType.Survey_Feedback__c.isAccessible() && Schema.sObjectType.FedTOM_Survey_Question__c.isAccessible()){ 
        if(UserInfo.getUserType() == 'Guest'){
                  isOnLoad = true;
                  hideFirstPanel = true;
                  init();
                  isSuccess = true; 
            }else{
                init();
                isSuccess = true;
                isOnLoad = false;
                hideFirstPanel = false;
            }  
        allMandatoryAnswered = false;
      }
      
    }
    
    public void init(){
        try{
            if(ApexPages.CurrentPage().getparameters().get('sid') != null){
                surveySentId =String.escapeSingleQuotes(ApexPages.CurrentPage().getparameters().get('sid')); //This is Survey SENT ID
            }
            surveySentId = 'a1W1Q0000079iG0';//'a1S1Q000007BAX2';Survey Sent Id
            if(surveySentId != null){
                surveySentList = new List<Survey_Sent__c>();
                surveySentList = [SELECT id, End_Date__c, GovCon_Opportunity__c ,createdDate,Start_Date__c,FedTOM_Survey_Questionnaire__c FROM Survey_Sent__c where id =: surveySentId Limit 1];
                system.debug('surveySentList=='+surveySentList);
                
                if(surveySentList != null && surveySentList.size()>0){
                     
                    surveySent = surveySentList[0];
                    if(surveySent.End_Date__c <= Date.today()){
                        isSurveyExpire = true;
                    }else{
                        isSurveyExpire = false;
                        surveyList = [SELECT id,Name,Description__c,Include_Accordian__c  FROM FedTOM_Survey_Questionnaire__c WHERE id =: surveySentList[0].FedTOM_Survey_Questionnaire__c Limit 1000]; 
                        system.debug('surveyList ==='+surveyList ); 
                        if(surveyList !=null && surveyList.size()>0){
                         	survey = surveyList[0];
                            showAccordian = survey.Include_Accordian__c;
                        }
                    }
                } 
                
                try{
                    List<Survey_Feedback__c> feedbackList = new List<Survey_Feedback__c>();
                    feedbackList = [SELECT id, name,Contact__c FROM Survey_Feedback__c WHERE User__c =: UserInfo.getUserId() AND Survey_Task__c =: surveySent.id Limit 1000 ];
                    system.debug('feedbackList =='+ feedbackList  );
                    
                    if(feedbackList.size() == 0){
                        alreadySubmitted = true;
                    }
                    else{
                     
                        if(UserInfo.getUserType() != 'Guest'){
                            alreadySubmitted = false;
                            hideFirstPanel  = false;
                            isOnLoad = false;
                            ApexPages.addMessage(new ApexPages.Message(ApexPages.SEVERITY.WARNING,'A survey for this task order and partner has already been submitted; you cannot submit the same survey twice.'));                    
                        }else{
                            alreadySubmitted = true;
                        }
                    }
                }
                catch(Exception e){
                     ApexPages.addMessage(new ApexPages.Message(ApexPages.SEVERITY.ERROR, e.getMessage()));
                }
                
                if(surveyList != null && surveyList.size()>0){
                    queList = new List<FedTOM_Survey_Question__c>();
                    queList = [SELECT id,Name,Answer__c, Descriptive_Answer__c,Question__c, Is_mandatory__c, Keyword__c, Question_Type__c, Sequence__c, Survey__c,(Select id,Answer__c,Answer_Number__c,Color__c,Name,Survey_Questionnaire_Response__c,FedTOM_Survey_Question__r.Question_Type__c,FedTOM_Survey_Question__r.Name From Survey_Answers__r)  FROM FedTOM_Survey_Question__c WHERE Survey__c =: survey.id order by Sequence__c Asc Limit 1000];
                }
                getDepedentQuestionData(survey.id);
                
                System.debug('queList size '+queList.size());
                qweOptWrapList = new List<QuestionOptionWrapper>();
                surveyAnsList = new List<Survey_Que_Answer__c >();
                for(FedTOM_Survey_Question__c eachQue : queList){
                    List<OptionDepQueWrapper> optDepQueWrapList = new List<OptionDepQueWrapper>();
                    
                    for(Survey_Que_Answer__c opt : eachQue.Survey_Answers__r){
                        String eachoptvsDepQue ='';
                        if(opt !=null){
                            surveyAnsList.add(opt);
                            List<String> depQueList = ansIdvsdepedentQueMap.get(opt.Id);
                            System.debug('depQueList '+depQueList);
                            if(depQueList !=null){
                                for(String str :depQueList){
                                    eachoptvsDepQue +=''+str +'PRATIK';
                                }
                            }else{
                               eachoptvsDepQue=''; 
                            }
                        }
                        System.debug('eachoptvsDepQue '+eachoptvsDepQue);
                        OptionDepQueWrapper optDepQueWrapObj = new OptionDepQueWrapper(opt,eachoptvsDepQue);
                        optDepQueWrapList.add(optDepQueWrapObj);
                        System.debug('optDepQueWrapList '+optDepQueWrapList);
                    }
                    System.debug('eachQue.Id '+eachQue.Id);
                    System.debug('depQueIdvsParentQueIdMap.get(eachQue.Id) '+depQueIdvsParentQueIdMap.get(eachQue.Id));
                    QuestionOptionWrapper eachQueOptWrap = new QuestionOptionWrapper(eachQue,optDepQueWrapList,depQueIdvsParentQueIdMap.get(eachQue.Id));
                    qweOptWrapList.add(eachQueOptWrap);
                    System.debug('qweOptWrapList '+qweOptWrapList);
                }
              
            }
        }
        catch(Exception e){
            ApexPages.addMessage(new ApexPages.Message(ApexPages.SEVERITY.ERROR, e.getMessage()));
            
        }
    }
    /*New Method for question depedency START*/
    public void getDepedentQuestionData(String surveyId){
        System.debug('surveyId '+surveyId);
        if(Schema.sObjectType.Survey_Teaming_Request_Task_Questionnair__c.isAccessible() && Schema.sObjectType.FedTOM_Survey_Questionnaire__c.isAccessible() && Schema.sObjectType.Survey_Feedback__c.isAccessible() && Schema.sObjectType.FedTOM_Survey_Question__c.isAccessible() && Schema.sObjectType.Survey_Question_Dependency__c.isAccessible() && Schema.sObjectType.Survey_Answer__c.isAccessible()){
            ansIdvsdepedentQueMap = new Map<String,List<String>>();
            depQueIdvsParentQueIdMap = new Map<String,String>();
            List<Survey_Question_Dependency__c> depedentQuestionList = [Select id,Dependant_Question__c,Parent_Question__c,Parent_Question__r.Survey__c,Survey_Answer__c From Survey_Question_Dependency__c Where Parent_Question__r.Survey__c =:surveyId ];
            System.debug('depedentQuestionList '+depedentQuestionList.size() ); 
            for(Survey_Question_Dependency__c eachDepedentQue : depedentQuestionList){
                System.debug('eachDepedentQue  '+eachDepedentQue );
                List<String> depQueIdList = ansIdvsdepedentQueMap.get(eachDepedentQue.Survey_Answer__c);
                depQueIdvsParentQueIdMap.put(eachDepedentQue.Dependant_Question__c, eachDepedentQue.Parent_Question__c);
                System.debug('depQueIdvsParentQueIdMap ***** '+depQueIdvsParentQueIdMap);
                if(depQueIdList != null ){
                    depQueIdList.add(eachDepedentQue.Dependant_Question__c); 
                    ansIdvsdepedentQueMap.put(eachDepedentQue.Survey_Answer__c,depQueIdList);
                }else{
                    depQueIdList = new List<String>();
                    depQueIdList.add(eachDepedentQue.Dependant_Question__c); 
                    ansIdvsdepedentQueMap.put(eachDepedentQue.Survey_Answer__c,depQueIdList); 
                }
            }
            System.debug('ansIdvsdepedentQueMap  '+ansIdvsdepedentQueMap );
        }
    }
    
    
    private contact con;
    private Task_Order_Contact__c taskOrderCon;
    public void continueNew(){
        System.debug('CLICK CONTINUE CALL');
        
        //List<Survey_Teaming_Request_Task_Questionnair__c> surveySentList = [SELECT id, FedCap_Opportunity__c, Survey__c FROM  Survey_Teaming_Request_Task_Questionnair__c Where id =:surveySentId];
        if(surveySent !=null){
            system.debug('surveySentList =='+ surveySentList );
            Id taskOrderID = surveySent.GovCon_Opportunity__c;
            
            System.debug('emailAddr '+emailAddr);
            System.debug('emailAddr '+firstName);
            System.debug('emailAddr '+lastName);
            System.debug('emailAddr '+companyName);
            System.debug('taskOrderID '+taskOrderID);
            List<Contact> conList = [Select Id, firstName,lastName,Contact.AccountId from Contact where id IN (Select Contact__c from Task_Order_Contact__c where Contact__r.email =: emailAddr AND FedCap_Opportunity__c =: taskOrderID )];
            
            system.debug('conList=='+  conList);
            if(conList != null && conList.size()>0){
                Boolean isSet = false;
                for(Contact con1 : conList){
                    if(con1.FirstName == firstName && con1.LastName == lastName){
                        isSet = true;
                        con = con1;
                        system.debug('con=='+con);
                    }
                } 
                if(!isSet){
                    con  = conList[0];
                }
                hideFirstPanel = false;
                isContinueClicked = true;
                isOnLoad = true;
                List<Feedback__c>fdbackConList = [SELECT id, name,Contact__c FROM Feedback__c WHERE Survey_Task__c =: surveySent.id AND Contact__c  =:con.id   Limit 1000];
                if(!fdbackConList.isEmpty()){
                    // alreadysubmitted = false;
                    hideFirstPanel = true;
                    //ApexPages.addMessage(new ApexPages.Message(ApexPages.SEVERITY.WARNING,'A survey for this task order and partner has already been submitted; you cannot submit the same survey twice.'));                    
                    errorMessageForGuestUser = 'A survey for this task order and partner has already been submitted; you cannot submit the same survey twice.';
                    isContinueClicked = false;
                    isOnLoad = false;
                }
                
            }else{
                hideFirstPanel = true;
                //ApexPages.addMessage(new Apexpages.Message(Apexpages.SEVERITY.ERROR, 'You do not have permission to access this survey. Please make sure you are entering the same email address and contact information where the survey was received.'));
                isContinueClicked = false;
                errorMessageForGuestUser = 'You do not have permission to access this survey. Please make sure you are entering the same email address and contact information where the survey was received.';
                isOnLoad = false;
            }
            System.debug('errorMessageForGuestUser '+errorMessageForGuestUser);
        }
        
        
    }
    
    public void submit(){
        
    }
    
    public void saveFeedback(){
        
        try{               
            //allMandatoryAnswered = false;
            surveyAnsUpdateList = new List<Survey_Que_Answer__c>();
            ansIdSet = new Set<String>();
            Boolean checkMandetoryAns = false;
            
            if(qweOptWrapList != null && qweOptWrapList.size()> 0){
                for(QuestionOptionWrapper queWra : qweOptWrapList){
                    
                    
                    /************************* for "Checkbox" Question type *******************/
                    if(queWra.question.Question_Type__c == 'Checkbox'){
                        System.debug('********Checkbox********');
                        Boolean flag = false;
                        for(OptionDepQueWrapper optWrap : queWra.queWrapList){
                            System.debug('optWrap.Id '+optWrap.option.Id);
                            System.debug('queWra '+optWrap.checkboxChecked);
                            if(optWrap.checkboxChecked){
                                flag = true;
                                ansIdSet.add(optWrap.option.Id);
                                for(Survey_Que_Answer__c eachOpt : surveyAnsList){
                                    if(eachOpt.Id == optWrap.option.Id){
                                        surveyAnsUpdateList.add(eachOpt);
                                    }
                                }
                            }
                        } 
                        System.debug('flag Checkbox '+flag);
                        if(queWra.question.Is_mandatory__c == true && !flag){
                            checkMandetoryAns = true;
                            System.debug('Checkbox checkMandetoryAns '+checkMandetoryAns);
                        } 
                    }   
                    /********************* for "Radiobox" Question type ************************/
                    if(queWra.question.Question_Type__c == 'Radio'){
                        Boolean flag = false;
                        System.debug('********Radio********');
                        System.debug('queWra '+queWra.radioSelected);
                        if(queWra.radioSelected != '' && queWra.radioSelected != null){
                            flag = true;
                            ansIdSet.add(queWra.radioSelected);
                            for(Survey_Que_Answer__c eachOpt : surveyAnsList){
                                if(eachOpt.Id == queWra.radioSelected){
                                    surveyAnsUpdateList.add(eachOpt);
                                }
                            }
                        }
                        System.debug('flag Radio '+flag);
                        if(queWra.question.Is_mandatory__c ==true && !flag){
                            checkMandetoryAns = true;
                            System.debug('Radio checkMandetoryAns '+checkMandetoryAns);
                        } 
                    } 
                    
                    /****************** for "Rating Scale' Question type  *************************/ 
                    if(queWra.question.Question_Type__c == 'Rating Scale'){
                        Boolean flag = false;
                        System.debug('********Rating Scale********');
                        System.debug('queWra '+queWra.ratingSelected);
                        if(queWra.ratingSelected != ''){
                            flag = true;
                            
                            for(OptionDepQueWrapper optWrap : queWra.queWrapList){
                                System.debug('RATING optWrap.Id '+optWrap.option.Id);
                                for(Survey_Que_Answer__c eachOpt : surveyAnsList){
                                    if(eachOpt.Id == optWrap.option.Id){
                                        eachOpt.Answer_Number__c = Decimal.valueOf(queWra.ratingSelected);
                                        surveyAnsUpdateList.add(eachOpt);
                                    }
                                }
                            } 
                        }
                        System.debug('flag Rating'+flag);
                        if(queWra.question.Is_mandatory__c ==true && !flag){
                            checkMandetoryAns = true;
                            System.debug('Rating checkMandetoryAns '+checkMandetoryAns);
                        } 
                    }
                    
                    
                    /******************** for "Text" Question type ********************************/
                    if(queWra.question.Question_type__c == 'Text'){
                        Boolean flag = false;
                        System.debug('********Text********');
                        System.debug('queWra '+queWra.textAns);
                        if(queWra.textAns != ''){
                            //System.debug('queWra.queWrapList '+queWra.queWrapList);
                            flag = true;
                            for(OptionDepQueWrapper optWrap : queWra.queWrapList){
                                System.debug('TEXT optWrap.Id '+optWrap.option.Id);
                                for(Survey_Que_Answer__c eachOpt : surveyAnsList){
                                    if(eachOpt.Id == optWrap.option.Id){
                                        eachOpt.Answer__c = queWra.textAns;
                                        surveyAnsUpdateList.add(eachOpt);
                                    }
                                }
                                
                            } 
                        }
                        System.debug('flag Text'+flag);
                        if(queWra.question.Is_mandatory__c ==true && !flag){
                            checkMandetoryAns = true;
                             System.debug('Text checkMandetoryAns '+checkMandetoryAns);
                        } 
                    }
                    
                    /***************** for "Picklist" Question type ****************************/
                    if(queWra.question.Question_Type__c == 'Picklist'){
                        Boolean flag = false;
                        System.debug('********Picklist********');
                        System.debug('queWra '+queWra.picklistSelected);
                        if(queWra.picklistSelected != ''){
                            ansIdSet.add(queWra.picklistSelected);
                            flag = true;
                            for(Survey_Que_Answer__c eachOpt : surveyAnsList){
                                if(eachOpt.Id == queWra.picklistSelected){
                                    surveyAnsUpdateList.add(eachOpt);
                                }
                            }
                        }
                        System.debug('flag Picklist'+flag);
                        if(queWra.question.Is_mandatory__c ==true && !flag){
                            checkMandetoryAns = true;
                            System.debug('Picklist checkMandetoryAns '+checkMandetoryAns);
                        } 
                    } 
                }
            }
            System.debug('checkMandetoryAns '+checkMandetoryAns);
            if(checkMandetoryAns){
                System.debug('IN IF checkMandetoryAns '+checkMandetoryAns);
                allMandatoryAnswered = true;
            }else{
                System.debug('IN ELSE checkMandetoryAns '+checkMandetoryAns);
                allMandatoryAnswered = false;
            }
            System.debug('ansIdSet '+ansIdSet);
            System.debug('surveyAnsUpdateList '+surveyAnsUpdateList);
        }
        catch(Exception e){
            
        }
        if(!allMandatoryAnswered){
            System.debug('responseStatus '+responseStatus);
            if(Schema.sObjectType.Survey_Feedback__c.isAccessible() && Schema.sObjectType.FedCap_Opportunity__c.isAccessible() && Schema.sObjectType.User.isAccessible() ){
                Survey_Feedback__c response = new Survey_Feedback__c();
                response.Status__c = responseStatus;
                response.FedCap_Opportunity__c = surveySent.GovCon_Opportunity__c;
                response.Date_Response_Received__c = System.today();
                response.Survey_Sent_Id__c = surveySent.Id;
                if(response != null){
                     insert response;
                }
                if(surveyAnsUpdateList.size()>0){
                    for(Survey_Que_Answer__c eachAns : surveyAnsUpdateList){
                        eachAns.Survey_Questionnaire_Response__c = response.Id;  
                    }
                    update surveyAnsUpdateList;
                    System.debug('surveyAnsUpdateList FINAL'+surveyAnsUpdateList);
                }
            }
            
        }
        //return false;
    }
    /****************************** Question and Option Wrapper classes *******************************/
    
    public class QuestionOptionWrapper{
        public FedTOM_Survey_Question__c question {get;set;}
        public List<OptionDepQueWrapper> queWrapList {get;set;}
        public String parentQue {get;set;}
        public String textAns {get;set;}
        public List<SelectOption> selectOptionPicklist {get;set;}
        public List<SelectOption> selectOptionRadio {get;set;}
        public List<SelectOption> ratingOptionList {get;set;}
        public String radioSelected {get;set;}
        public String picklistSelected{get;set;}
        public String ratingSelected{get;set;}
        
        public QuestionOptionWrapper(FedTOM_Survey_Question__c question, List<OptionDepQueWrapper> queWrapList,String parentQueId){
           System.debug('parentQueId '+parentQueId);
            this.question = question;
            this.queWrapList = queWrapList;
            this.parentQue = parentQueId;
            
            if(question.Question_Type__c == 'Picklist' && queWrapList.size() > 0){
                selectOptionPicklist = new List<SelectOption>();
                for(OptionDepQueWrapper optWra : queWrapList){
                    selectOptionPicklist.add(new selectOption(optWra.option.Id, optWra.option.Answer__c));                    
                }
            }
            if(question.Question_Type__c == 'Radio' && queWrapList.size() > 0){
                selectOptionRadio  = new List<SelectOption>();
                for(OptionDepQueWrapper optWra : queWrapList){
                    selectOptionRadio.add(new selectOption(optWra.option.Id, optWra.option.Answer__c));
                }
            }
            if(question.Question_Type__c == 'Rating Scale'){
                ratingOptionList  = new List<SelectOption>();
                for(Integer i = 1; i < =10; i++){
                    String opt = String.valueOf(i);
                    ratingOptionList.add(new selectOption(opt,opt));
                }
            }
             
        }
    }
    public class OptionDepQueWrapper{
        public Survey_Que_Answer__c option {get;set;}
        public String depQuestions {get;set;}
        public Boolean checkboxChecked {get;set;}
        
        public OptionDepQueWrapper(Survey_Que_Answer__c option, String ques){
            this.option = option;
            this.depQuestions = ques;
            this.checkboxChecked = false;        
        }
    }
    
}
